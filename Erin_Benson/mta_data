{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###Challenge 1\n",
    "\n",
    "Open up a new IPython notebook\n",
    "Download a few MTA turnstile data files\n",
    "Open up a file, use csv reader to read it, make a python dict where there is a key for each (C/A, UNIT, SCP, STATION). These are the first four columns. The value for this key should be a list of lists. Each list in the list is the rest of the columns in a row. For example, one key-value pair should look like\n",
    "{ ('A002','R051','02-00-00','LEXINGTON AVE'): [ ['NQR456', 'BMT', '01/03/2015', '03:00:00', 'REGULAR', '0004945474', '0001675324'], ['NQR456', 'BMT', '01/03/2015', '07:00:00', 'REGULAR', '0004945478', '0001675333'], ['NQR456', 'BMT', '01/03/2015', '11:00:00', 'REGULAR', '0004945515', '0001675364'], ... ] }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from __future__ import division\n",
    "import csv\n",
    "from datetime import datetime\n",
    "import matplotlib.pyplot as plt\n",
    "from collections import OrderedDict\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Challenge 1: (('A030', 'R083', '01-06-00', '23 ST-5 AVE'), [('NR', 'BMT', '06/27/2015', '00:00:00', 'REGULAR', '0005953341', '0003310763'), ('NR', 'BMT', '06/27/2015', '04:00:00', 'REGULAR', '0005953422', '0003310780'), ('NR', 'BMT', '06/27/2015', '08:00:00', 'REGULAR', '0005953447', '0003310808'), ('NR', 'BMT', '06/27/2015', '12:00:00', 'REGULAR', '0005953536', '0003310957'), ('NR', 'BMT', '06/27/2015', '16:00:00', 'REGULAR', '0005953814', '0003311230'), ('NR', 'BMT', '06/27/2015', '20:00:00', 'REGULAR', '0005954213', '0003311487'), ('NR', 'BMT', '06/28/2015', '00:00:00', 'REGULAR', '0005954420', '0003311555'), ('NR', 'BMT', '06/28/2015', '04:00:00', 'REGULAR', '0005954483', '0003311567'), ('NR', 'BMT', '06/28/2015', '08:00:00', 'REGULAR', '0005954499', '0003311581'), ('NR', 'BMT', '06/28/2015', '12:00:00', 'REGULAR', '0005954576', '0003311720'), ('NR', 'BMT', '06/28/2015', '16:00:00', 'REGULAR', '0005954831', '0003312037'), ('NR', 'BMT', '06/28/2015', '20:00:00', 'REGULAR', '0005955144', '0003312189'), ('NR', 'BMT', '06/29/2015', '00:00:00', 'REGULAR', '0005955312', '0003312252'), ('NR', 'BMT', '06/29/2015', '04:00:00', 'REGULAR', '0005955339', '0003312256'), ('NR', 'BMT', '06/29/2015', '08:00:00', 'REGULAR', '0005955451', '0003312324'), ('NR', 'BMT', '06/29/2015', '12:00:00', 'REGULAR', '0005955843', '0003312660'), ('NR', 'BMT', '06/29/2015', '16:00:00', 'REGULAR', '0005956181', '0003312926'), ('NR', 'BMT', '06/29/2015', '20:00:00', 'REGULAR', '0005957193', '0003313187'), ('NR', 'BMT', '06/30/2015', '00:00:00', 'REGULAR', '0005957530', '0003313245'), ('NR', 'BMT', '06/30/2015', '04:00:00', 'REGULAR', '0005957558', '0003313250'), ('NR', 'BMT', '06/30/2015', '08:00:00', 'REGULAR', '0005957675', '0003313305'), ('NR', 'BMT', '06/30/2015', '12:00:00', 'REGULAR', '0005958179', '0003313652'), ('NR', 'BMT', '06/30/2015', '16:00:00', 'REGULAR', '0005958596', '0003313908'), ('NR', 'BMT', '06/30/2015', '20:00:00', 'REGULAR', '0005959699', '0003314198'), ('NR', 'BMT', '07/01/2015', '00:00:00', 'REGULAR', '0005960073', '0003314277'), ('NR', 'BMT', '07/01/2015', '04:00:00', 'REGULAR', '0005960102', '0003314284'), ('NR', 'BMT', '07/01/2015', '08:00:00', 'REGULAR', '0005960228', '0003314344'), ('NR', 'BMT', '07/01/2015', '12:00:00', 'REGULAR', '0005960738', '0003314645'), ('NR', 'BMT', '07/01/2015', '16:00:00', 'REGULAR', '0005961179', '0003314906'), ('NR', 'BMT', '07/01/2015', '20:00:00', 'REGULAR', '0005962238', '0003315203'), ('NR', 'BMT', '07/02/2015', '00:00:00', 'REGULAR', '0005962573', '0003315254'), ('NR', 'BMT', '07/02/2015', '04:00:00', 'REGULAR', '0005962603', '0003315259'), ('NR', 'BMT', '07/02/2015', '08:00:00', 'REGULAR', '0005962614', '0003315294'), ('NR', 'BMT', '07/02/2015', '12:00:00', 'REGULAR', '0005963001', '0003315612'), ('NR', 'BMT', '07/02/2015', '16:00:00', 'REGULAR', '0005963579', '0003315967'), ('NR', 'BMT', '07/02/2015', '20:00:00', 'REGULAR', '0005964369', '0003316227'), ('NR', 'BMT', '07/03/2015', '00:00:00', 'REGULAR', '0005964668', '0003316321'), ('NR', 'BMT', '07/03/2015', '04:00:00', 'REGULAR', '0005964715', '0003316332'), ('NR', 'BMT', '07/03/2015', '08:00:00', 'REGULAR', '0005964741', '0003316365'), ('NR', 'BMT', '07/03/2015', '12:00:00', 'REGULAR', '0005964868', '0003316517'), ('NR', 'BMT', '07/03/2015', '16:00:00', 'REGULAR', '0005965101', '0003316783'), ('NR', 'BMT', '07/03/2015', '20:00:00', 'REGULAR', '0005965399', '0003317001')])\n"
     ]
    }
   ],
   "source": [
    "with open('turnstile_150704.txt') as f:\n",
    "    reader = csv.reader(f)\n",
    "    rows = [[cell.strip() for cell in row] for row in reader]\n",
    "\n",
    "assert rows.pop(0) == ['C/A', 'UNIT', 'SCP', 'STATION', 'LINENAME',\n",
    "                       'DIVISION', 'DATE', 'TIME', 'DESC', 'ENTRIES',\n",
    "                       'EXITS']\n",
    "\n",
    "raw_readings = {}\n",
    "for row in rows:\n",
    "    raw_readings.setdefault(tuple(row[:4]), []).append(tuple(row[4:]))\n",
    "print \"Challenge 1:\", raw_readings.items()[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###Challenge 2\n",
    "\n",
    "Let's turn this into a time series.\n",
    "\n",
    "For each key (basically the control area, unit, device address and station of a specific turnstile), have a list again, but let the list be comprised of just the point in time and the count of entries.\n",
    "\n",
    "This basically means keeping only the date, time, and entries fields in each list. You can convert the date and time into datetime objects -- That is a python class that represents a point in time. You can combine the date and time fields into a string and use the dateutil module to convert it into a datetime object. For an example check this StackOverflow question.\n",
    "\n",
    "Your new dict should look something like\n",
    "\n",
    "{ ('A002','R051','02-00-00','LEXINGTON AVE'): [ [datetime.datetime(2013, 3, 2, 3, 0), 3788], [datetime.datetime(2013, 3, 2, 7, 0), 2585], [datetime.datetime(2013, 3, 2, 12, 0), 10653], [datetime.datetime(2013, 3, 2, 17, 0), 11016], [datetime.datetime(2013, 3, 2, 23, 0), 10666], [datetime.datetime(2013, 3, 3, 3, 0), 10814], [datetime.datetime(2013, 3, 3, 7, 0), 10229], ... ], .... }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Challenge 2 (('A030', 'R083', '01-06-00', '23 ST-5 AVE'), [(datetime.datetime(2015, 6, 27, 0, 0), 81), (datetime.datetime(2015, 6, 27, 4, 0), 25), (datetime.datetime(2015, 6, 27, 8, 0), 89), (datetime.datetime(2015, 6, 27, 12, 0), 278), (datetime.datetime(2015, 6, 27, 16, 0), 399), (datetime.datetime(2015, 6, 27, 20, 0), 207), (datetime.datetime(2015, 6, 28, 0, 0), 63), (datetime.datetime(2015, 6, 28, 4, 0), 16), (datetime.datetime(2015, 6, 28, 8, 0), 77), (datetime.datetime(2015, 6, 28, 12, 0), 255), (datetime.datetime(2015, 6, 28, 16, 0), 313), (datetime.datetime(2015, 6, 28, 20, 0), 168), (datetime.datetime(2015, 6, 29, 0, 0), 27), (datetime.datetime(2015, 6, 29, 4, 0), 112), (datetime.datetime(2015, 6, 29, 8, 0), 392), (datetime.datetime(2015, 6, 29, 12, 0), 338), (datetime.datetime(2015, 6, 29, 16, 0), 1012), (datetime.datetime(2015, 6, 29, 20, 0), 337), (datetime.datetime(2015, 6, 30, 0, 0), 28), (datetime.datetime(2015, 6, 30, 4, 0), 117), (datetime.datetime(2015, 6, 30, 8, 0), 504), (datetime.datetime(2015, 6, 30, 12, 0), 417), (datetime.datetime(2015, 6, 30, 16, 0), 1103), (datetime.datetime(2015, 6, 30, 20, 0), 374), (datetime.datetime(2015, 7, 1, 0, 0), 29), (datetime.datetime(2015, 7, 1, 4, 0), 126), (datetime.datetime(2015, 7, 1, 8, 0), 510), (datetime.datetime(2015, 7, 1, 12, 0), 441), (datetime.datetime(2015, 7, 1, 16, 0), 1059), (datetime.datetime(2015, 7, 1, 20, 0), 335), (datetime.datetime(2015, 7, 2, 0, 0), 30), (datetime.datetime(2015, 7, 2, 4, 0), 11), (datetime.datetime(2015, 7, 2, 8, 0), 387), (datetime.datetime(2015, 7, 2, 12, 0), 578), (datetime.datetime(2015, 7, 2, 16, 0), 790), (datetime.datetime(2015, 7, 2, 20, 0), 299), (datetime.datetime(2015, 7, 3, 0, 0), 47), (datetime.datetime(2015, 7, 3, 4, 0), 26), (datetime.datetime(2015, 7, 3, 8, 0), 127), (datetime.datetime(2015, 7, 3, 12, 0), 233), (datetime.datetime(2015, 7, 3, 16, 0), 298)])\n"
     ]
    }
   ],
   "source": [
    "datetime_cumulative = {turnstile: [(datetime.strptime(date + time,\n",
    "                                                      '%m/%d/%Y%X'),\n",
    "                                    int(in_cumulative))\n",
    "                                   for _, _, date, time,\n",
    "                                       _, in_cumulative, _ in rows]\n",
    "                       for turnstile, rows in raw_readings.items()}\n",
    "\n",
    "for rows in datetime_cumulative.values():\n",
    "    assert rows == sorted(rows)\n",
    "\n",
    "datetime_count_times = {turnstile: [[rows[i][0],\n",
    "                                     rows[i+1][1] - rows[i][1],\n",
    "                                     rows[i+1][0] - rows[i][0]]\n",
    "                                    for i in range(len(rows) - 1)]\n",
    "                        for turnstile, rows in datetime_cumulative.items()}\n",
    "\n",
    "datetime_counts = {turnstile: [(time, count)\n",
    "                               for (time, count, _) in rows\n",
    "                               if 0 <= count <= 5000]\n",
    "                   for turnstile, rows in datetime_count_times.items()}\n",
    "print \"Challenge 2\", datetime_counts.items()[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###Challenge 3\n",
    "\n",
    "These counts are for every n hours. (What is n?) We want total daily entries.\n",
    "Now make it that we again have the same keys, but now we have a single value for a single day, which is the total number of passengers that entered through this turnstile on this day."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(('A030', 'R083', '01-06-00', '23 ST-5 AVE'), [(datetime.date(2015, 6, 27), 1079), (datetime.date(2015, 6, 28), 892), (datetime.date(2015, 6, 29), 2218), (datetime.date(2015, 6, 30), 2543), (datetime.date(2015, 7, 1), 2500), (datetime.date(2015, 7, 2), 2095), (datetime.date(2015, 7, 3), 731)])\n"
     ]
    }
   ],
   "source": [
    "day_counts = {}\n",
    "for turnstile, rows in datetime_counts.items():\n",
    "    by_day = {}\n",
    "    for time, count in rows:\n",
    "        day = time.date()\n",
    "        by_day[day] = by_day.get(day, 0) + count\n",
    "    day_counts[turnstile] = sorted(by_day.items())\n",
    "print day_counts.items()[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###Challenge 4\n",
    "\n",
    "We will plot the daily time series for a turnstile.\n",
    "\n",
    "In ipython notebook, add this to the beginning of your next cell:\n",
    "```\n",
    "%matplotlib inline\n",
    "```\n",
    "This will make your matplotlib graphs integrate nicely with the notebook. To plot the time series, import matplotlib with\n",
    "```\n",
    "import matplotlib.pyplot as plt\n",
    "```\n",
    "Take the list of [(date1, count1), (date2, count2), ...], for the turnstile and turn it into two lists: dates and counts. This should plot it:\n",
    "```\n",
    "plt.figure(figsize=(10,3))\n",
    "plt.plot(dates,counts)\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nTIyOuwKzYudWEUbuNkfHKauj9sS1bBkWXPTuDaefXtm+dSusWFGZ7JWXw5gxsHAhdOy446KNkpLQ\nXihSJcPmzFFSJyIikg8andiZ2U+ATe4+IQvxbFdWVrb9uLS0lNIEShy0aBG2WfnSl+DUUyvbt20L\nK3JTI3x//Sv88Y8h4evQYccRvpKS/Cu7tWYNXHJJKBnWuXPS0YiIiOSO8vJyysvLkw4jrUbdijWz\ni4HvAce6+8aobTSAu98UPZ4G3EC4FTsjdit2ODA4F27FZsu2bWHPvfjt3NRH27bpR/i6dEk66h1t\n2wYnnggDBsCvf510NCIiIrktl27FNjixM7OhwG2E5OzD2PNSiycGUrl44svR4onZwCigAniKZl48\nkRR3WL26aqKXSvxattxxW5aSEthrr+Ruf956KzzyCLz4YohPREREapZ3iZ2ZTQQGA52B9wkjcNcD\nrYGPo6fNdPeR0fN/TJh3twW42t2fjtpT2520I2x3MqqGr1dQiV1N3MMtz+rJ3vz54Vz127klJdC1\na9MmfCoZJiIiUj95l9g1t2JJ7GriDmvX7ng7d/78sP1IuhG+7t0bn/D9859w2GFhI+Kzz87OexER\nESl0SuzqUOyJXW3Wrg2LNKrP4/vss7ANS/URvv32g512yuy1L7wQ2rQJC0FEREQkM0rs6qDErv4+\n/rjq6F4q8fv005DwVR/l69GjasL3wAPwm9+EkmGqwiEiIpI5JXZ1UGKXPevWVY7wxUf5Pvoo1M4t\nKQn79/3+9yoZJiIi0hBK7OqgxK7prV8PixaFRG/+/FA27FvfSjoqERGR/KPErg5K7ERERCRf5FJi\nl+G0ehERERHJdUrsRERERAqEEjsRERGRAqHETkRERKRAKLETERERKRBK7EREREQKhBI7ERERkQKh\nxE5ERESkQCixExERESkQSuxERERECoQSOxEREZECocROREREpEAosRMREREpEErsRERERApERomd\nmY01s/fNbF6srZOZTTezJWb2jJntHjt3vZktNbNFZjYk1t7fzOZF5+7I7luRxigvL086hKKjPm9+\n6vPmpz5vfurz4pbpiN19wNBqbaOB6e7eG3gueoyZlQDnAiXRNWPMzKJr7gZGuHsvoJeZVX9NSYh+\nEDQ/9XnzU583P/V581OfF7eMEjt3fwn4pFrzacD90fH9wOnR8TBgortvdvcVwDJgkJntA3Rw94ro\n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\ngg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x115fe9e10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for turnstile, values in day_counts.items():\n",
    "    dates = [date for date, count in values]\n",
    "    counts = [count for date, count in values]\n",
    "plt.figure(figsize = (10,3))\n",
    "plt.plot(dates, counts)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###Challenge 5\n",
    "\n",
    "So far we've been operating on a single turnstile level, let's combine turnstiles in the same ControlArea/Unit/Station combo. There are some ControlArea/Unit/Station groups that have a single turnstile, but most have multiple turnstilea-- same value for the C/A, UNIT and STATION columns, different values for the SCP column.\n",
    "\n",
    "We want to combine the numbers together -- for each ControlArea/UNIT/STATION combo, for each day, add the counts from each turnstile belonging to that combo."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('BOYD-88 ST', [(datetime.date(2015, 6, 27), 2692), (datetime.date(2015, 6, 28), 2263), (datetime.date(2015, 6, 29), 5538), (datetime.date(2015, 6, 30), 5688), (datetime.date(2015, 7, 1), 5746), (datetime.date(2015, 7, 2), 5643), (datetime.date(2015, 7, 3), 3422)])\n"
     ]
    }
   ],
   "source": [
    "#(By CA/Unit/Station)\n",
    "group_all_counts = {}\n",
    "keymap = {turnstile: tuple((turnstile[0], turnstile[1], turnstile[3])) for turnstile, rows in day_counts.items()}\n",
    "for turnstile, rows in day_counts.items():\n",
    "    group_all_counts.setdefault(tuple(keymap[turnstile]), []).append(tuple(rows))\n",
    "\n",
    "group_day_counts = {}\n",
    "for station, data in group_all_counts.items():\n",
    "    new_dict = {}\n",
    "    for week in data:\n",
    "            for day, count in week:\n",
    "                new_dict[day] = new_dict.get(day, 0) + count\n",
    "            group_day_counts[station] = sorted(new_dict.items())\n",
    "#print group_day_counts.items()[0]\n",
    "\n",
    "#(By just the station name)\n",
    "station_all_counts = {}\n",
    "station_keymap = {turnstile: turnstile[2] for turnstile, rows in group_day_counts.items()}\n",
    "for turnstile, rows in group_day_counts.items():\n",
    "    station_all_counts.setdefault(station_keymap[turnstile], []).append(tuple(rows))\n",
    "\n",
    "station_day_counts = {}\n",
    "for station, data in station_all_counts.items():\n",
    "    station_new_dict = {}\n",
    "    for week in data:\n",
    "            for day, count in week:\n",
    "                station_new_dict[day] = station_new_dict.get(day, 0) + count\n",
    "            station_day_counts[station] = sorted(station_new_dict.items())\n",
    "print station_day_counts.items()[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###Challenge 6\n",
    "\n",
    "Similarly, combine everything in each station, and come up with a time series of [(date1, count1),(date2,count2),...] type of time series for each STATION, by adding up all the turnstiles in a station."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "for station, total_counts in station_day_counts.items():\n",
    "    station_dates = [date for date, count in total_counts]\n",
    "    station_counts = [count for date, count in total_counts]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###Challenge 7\n",
    "\n",
    "Plot the time series for a station."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nG0NxV1vht2QJrF1bd+G3667QrFneQy2oTz6Brl3h7rvh8MPjjkZERCTZVNhlkKRZsZ99trnYq1n0\nLVkCS5eGFq26Jnq0bg1b5fKuvHk2YAA0bx6WNxEREZG6qbDLIEmFXSabNsEHH9Re+C1ZElrAdt21\n7oke228f9ycJHn0ULr443At2u+3ijkZERCT5VNhlUEyFXTa+/DK07NU2y3fJEthmm7onehRieZcP\nPwxdsA88AIcckt/3EhERKRUq7DIotcIuE3f4+OPai76ay7vUNuavocu79O0bXuf663P32UREREqd\nCrsMyq2wy0a2y7vUNdGjruVdxo+HK6+EV18NrYciIiKSHRV2Gaiw2zKZlnd5772wvEvNgq9NGxgy\nBCZNgh494v4UIiIixUWFXQYq7PKj5vIuqUXfUUfB4MFxRygiIlJ8VNhloMJOREREikWSCrsiWl1N\nREREROqiwk5ERESkRKiwExERESkRKuxERERESoQKOxEREZESocJOREREpESosBMREREpESrsRERE\nREqECjsRERGREqHCTkRERKREqLATERERKREq7ERERERKRCyFnZkdbWZvmNlCM7s0jhjkmyorK+MO\noewo54WnnBeecl54ynl5K3hhZ2ZbA7cARwP7Av3MrEuh45Bv0g+CwlPOC085LzzlvPCU8/IWR4td\nT2CRuy929/XA/cDxMcQhIiIiUlLiKOzaA++mPF8a7RMRERGRBjB3L+wbmp0IHO3uZ0fPTwN6uftv\nUs4pbFAiIiIiDeDuFncMAI1ieM9lQIeU5x0IrXZfS0pyRERERIpJHF2xM4DOZtbRzJoAfYGJMcQh\nIiIiUlIK3mLn7hvM7DxgKrA1cKe7v17oOERERERKTcHH2ImIiIhIfmTVFWtmnzX0jczsx2Y2w8zm\nRl8PjfY3N7NZKY+VZnZjmut/aWZzouv/n5l1TTmWdsFjMzvJzOab2UYzOzBlf0czW5vynrc29PPl\nWj5zHh07w8zmRTmdbGat0lyvnNf/NerKed8on6+Z2YharlfO6/8aPVM+41wz65tyrHv0fb7QzG6u\n5fqyynm1TLk3s0oz655mfyczeznKyf1m1jjav4+ZvWhmX5rZRbW8ZjMz+6eZvR79P7g25VhTMxsf\nve5LZrZ7yrEpZrbKzCbVeL3RZvbvlHx3JcHykPNav3dTrlXO6z5e35wfH+V8lpnNNLPD0lwbb87d\n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\ngg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11828f790>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (10,3))\n",
    "plt.plot(station_dates, station_counts)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###Challenge 8\n",
    "\n",
    "Make one list of counts for one week for one station. Monday's count, Tuesday's count, etc. so it's a list of 7 counts. Make the same list for another week, and another week, and another week. ```plt.plot(week_count_list)``` for every ```week_count_list``` you created this way. You should get a rainbow plot of weekly commute numbers on top of each other."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###Challenge 9\n",
    "\n",
    "Over multiple weeks, sum total ridership for each station and sort them, so you can find out the stations with the highest traffic during the time you investigate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OrderedDict([('34 ST-PENN STA', 1010725), ('42 ST-GRD CNTRL', 826071), ('34 ST-HERALD SQ', 686365), ('14 ST-UNION SQ', 645491), ('86 ST', 621707), ('42 ST-TIMES SQ', 603601), ('42 ST-PA BUS TE', 567004), ('CANAL ST', 454307), ('125 ST', 436317), ('96 ST', 435014)])\n"
     ]
    }
   ],
   "source": [
    "total_ridership_counts = {}\n",
    "for station, date_counts in station_day_counts.items():\n",
    "    for day, count in date_counts:\n",
    "        total_ridership_counts[station] = total_ridership_counts.get(station, 0) + count\n",
    "\n",
    "top_stations = OrderedDict(sorted(total_ridership_counts.items(), key=lambda tup: tup[-1], reverse = True)[0:10])\n",
    "print top_stations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###Challenge 10\n",
    "\n",
    "Make a single list of these total ridership values and plot it with\n",
    "```\n",
    "plt.hist(total_ridership_counts)\n",
    "```\n",
    "to get an idea about the distribution of total ridership among different stations.\n",
    "\n",
    "This should show you that most stations have a small traffic, and the histogram bins for large traffic volumes have small bars.\n",
    "\n",
    "*Additional Hint:*\n",
    "\n",
    "If you want to see which stations take the meat of the traffic, you can sort the total ridership counts and make a plt.bar graph. For this, you want to have two lists: the indices of each bar, and the values. The indices can just be 0,1,2,3,..., so you can do\n",
    "```\n",
    "indices = range(len(total_ridership_values))\n",
    "plt.bar(indices, total_ridership_values)\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x108a639d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(range(len(top_stations)), top_stations.values(), align='center')\n",
    "plt.xticks(range(len(top_stations)), top_stations.keys(), rotation=60)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
